#!/usr/bin/env python3
"""
Enhanced CCOM CLI v0.3 - Vibe Coder Interface
Advanced natural language processing and enterprise automation
"""

import sys
import argparse
from pathlib import Path
from ccom.orchestrator import CCOMOrchestrator

def create_enhanced_cli():
    """Create enhanced CLI with natural language support"""
    parser = argparse.ArgumentParser(
        description="CCOM v0.3 - Claude Code Orchestrator and Memory",
        epilog="Natural language examples: 'deploy my app', 'check security', 'quality audit'",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    # Add natural language support
    parser.add_argument('command', nargs='*',
                       help='Natural language command or traditional command')

    # Traditional commands
    parser.add_argument('--status', action='store_true',
                       help='Show CCOM and project status')
    parser.add_argument('--memory', action='store_true',
                       help='Show memory contents')
    parser.add_argument('--stats', action='store_true',
                       help='Show memory statistics')
    parser.add_argument('--remember', type=str,
                       help='Remember a feature: --remember "auth system"')
    parser.add_argument('--init', action='store_true',
                       help='Initialize CCOM in current directory')
    parser.add_argument('--force', action='store_true',
                       help='Force refresh CCOM configuration even if v0.3 exists')

    # Advanced options
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='Verbose output for debugging')
    parser.add_argument('--dry-run', action='store_true',
                       help='Show what would be done without executing')

    return parser

def handle_traditional_commands(args, orchestrator):
    """Handle traditional flag-based commands"""
    if args.status:
        orchestrator.show_status()
        return True
    elif args.memory:
        orchestrator.show_memory()
        return True
    elif args.remember:
        orchestrator.handle_memory_command(f"remember {args.remember}")
        return True
    elif args.init:
        init_ccom_project(force=args.force)
        return True

    return False

def init_ccom_project(force=False):
    """Initialize CCOM v0.3 in current project"""
    print("üöÄ Initializing CCOM v0.3 in current project...")

    current_dir = Path.cwd()
    claude_dir = current_dir / ".claude"

    # Create directories
    claude_dir.mkdir(exist_ok=True)
    agents_dir = claude_dir / "agents"
    agents_dir.mkdir(exist_ok=True)

    # Copy agents from CCOM installation
    ccom_dir = Path(__file__).parent.parent
    source_agents = ccom_dir / ".claude" / "agents"

    if source_agents.exists():
        import shutil
        for agent_file in source_agents.glob("*.md"):
            dest_file = agents_dir / agent_file.name
            shutil.copy2(agent_file, dest_file)
            print(f"‚úÖ Installed agent: {agent_file.name}")

    # Handle CLAUDE.md - backup existing and create v0.3
    claude_md = current_dir / "CLAUDE.md"
    if claude_md.exists():
        # Check if it's already v0.3
        try:
            with open(claude_md, 'r', encoding='utf-8') as f:
                content = f.read()

            if "CCOM Integration for Claude Code v0.3" in content and not force:
                print("‚úÖ CLAUDE.md already v0.3 configuration (use --force to refresh)")
            else:
                # Backup existing file
                backup_path = current_dir / "CLAUDE.md.bak"
                import shutil
                shutil.copy2(claude_md, backup_path)
                print(f"‚ö†Ô∏è  Backed up existing CLAUDE.md to CLAUDE.md.bak")

                # Create v0.3 configuration
                create_enhanced_claude_md(claude_md)
                print("‚úÖ Updated CLAUDE.md to v0.3 configuration")
        except Exception as e:
            print(f"‚ö†Ô∏è  Error reading CLAUDE.md: {e}")
            # Backup existing file before creating new one
            backup_path = current_dir / "CLAUDE.md.bak"
            import shutil
            shutil.copy2(claude_md, backup_path)
            print(f"‚ö†Ô∏è  Backed up existing CLAUDE.md to CLAUDE.md.bak")

            create_enhanced_claude_md(claude_md)
            print("‚úÖ Created new CLAUDE.md v0.3 configuration")
    else:
        create_enhanced_claude_md(claude_md)
        print("‚úÖ Created CLAUDE.md v0.3 configuration")

    # Initialize memory
    orchestrator = CCOMOrchestrator()
    orchestrator.save_memory()
    print("‚úÖ Initialized memory system")

    print("\nüéâ CCOM v0.3 initialized successfully!")
    print("\nüìñ Try these CCOM commands:")
    print("  ccom 'deploy my app'")
    print("  ccom 'check security'")
    print("  ccom 'quality audit'")
    print("  ccom --status")
    print("\nüí° CCOM only activates with 'ccom' prefix - regular Claude Code otherwise!")

def create_enhanced_claude_md(claude_md_path):
    """Create enhanced CLAUDE.md by copying from the CCOM development template"""
    from pathlib import Path
    import os

    # Find the CCOM package installation directory
    try:
        # Try to find the source CLAUDE.md from the development directory
        current_file = Path(__file__).resolve()
        ccom_dev_dir = current_file.parent.parent  # Go up from ccom/cli.py to project root
        source_claude_md = ccom_dev_dir / "CLAUDE.md"

        if source_claude_md.exists():
            # Read the actual CLAUDE.md from development repo
            with open(source_claude_md, 'r', encoding='utf-8') as f:
                content = f.read()

            # Write to destination
            with open(claude_md_path, 'w', encoding='utf-8') as f:
                f.write(content)

            print(f"üìã Copied CLAUDE.md from: {source_claude_md}")
        else:
            # Fallback: Use a minimal template if source not found
            content = """# CCOM Integration for Claude Code v0.3

**ARCHITECTURE**: CCOM provides the orchestration layer that Claude Code lacks.
- **Claude Code**: Context, templates, interactive assistance, agent specifications
- **CCOM**: Native execution, orchestration, automation, enterprise workflows

**IMPORTANT**: Only activate CCOM functionality when user message starts with "ccom" (case-insensitive).

## CCOM Command Processing

For full documentation, see the CCOM development repository.
"""
            with open(claude_md_path, 'w', encoding='utf-8') as f:
                f.write(content)

            print(f"‚ö†Ô∏è  Using fallback template - source not found: {source_claude_md}")

    except Exception as e:
        print(f"‚ùå Error creating CLAUDE.md: {e}")
        # Create minimal working version
        content = "# CCOM Integration for Claude Code v0.3\n\n**IMPORTANT**: Only activate CCOM functionality when user message starts with \"ccom\"."
        with open(claude_md_path, 'w', encoding='utf-8') as f:
            f.write(content)

def show_help():
    """Show enhanced help with examples"""
    print("""
üöÄ CCOM v0.3 - Claude Code Orchestrator and Memory

üéØ PREFIX-BASED ACTIVATION:
  Only commands starting with "ccom" activate CCOM functionality
  All other commands use regular Claude Code behavior

NATURAL LANGUAGE COMMANDS (Recommended):
  ccom "deploy my app"              ‚Üí Enterprise deployment pipeline
  ccom "check security"             ‚Üí Comprehensive security audit
  ccom "quality audit"              ‚Üí Code quality analysis
  ccom "make it secure"             ‚Üí Security hardening
  ccom "ship it to production"      ‚Üí Full deployment sequence

TRADITIONAL COMMANDS:
  ccom --status                     ‚Üí Show project status
  ccom --memory                     ‚Üí Show remembered features
  ccom --remember "feature name"    ‚Üí Add feature to memory
  ccom --init                       ‚Üí Initialize/refresh CCOM in project

EXAMPLES:
  ccom "deploy"                     ‚Üí Quick deployment
  ccom "security scan"              ‚Üí Security check
  ccom "fix quality issues"         ‚Üí Auto-fix code quality
  ccom --status                     ‚Üí Traditional status check

ENTERPRISE FEATURES:
  ‚úÖ Claude Code native integration (prefix-based activation)
  ‚úÖ Visual engagement indicators (clear CCOM vs regular CC)
  ‚úÖ Multi-agent orchestration (quality, security, deployment)
  ‚úÖ TodoWrite integration (systematic workflow tracking)
  ‚úÖ Memory system (cross-session feature tracking)
  ‚úÖ Enterprise security scanning (vulnerability detection)
  ‚úÖ Production deployment pipeline (zero-downtime)

For more info: https://github.com/your-repo/ccom
""")

def main():
    """Enhanced main CLI entry point"""
    parser = create_enhanced_cli()

    # Handle no arguments
    if len(sys.argv) == 1:
        show_help()
        return

    args = parser.parse_args()

    try:
        orchestrator = CCOMOrchestrator()

        # Handle traditional commands first
        if handle_traditional_commands(args, orchestrator):
            return

        # Handle natural language commands
        if args.command:
            command_text = " ".join(args.command)

            if args.verbose:
                print(f"üîç Processing: '{command_text}'")

            if args.dry_run:
                print(f"üß™ Dry run: Would execute '{command_text}'")
                return

            orchestrator.handle_natural_language(command_text)
        else:
            print("‚ùì No command provided. Use 'ccom --help' for usage.")

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Operation cancelled by user")
    except Exception as e:
        print(f"‚ùå Error: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    main()